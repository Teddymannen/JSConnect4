globalThis.testOn = true;
// GameLogic tests here
// run with "npm run test-jest"
require('./load-all-classes.js');
const getConsoleLogOutput = require('./capture-console-log.js');

test('Check that the makeMove() method works.', () => {
  let game = new Game(6, 7);
  let board = game.board;
  let player1 = new Player('Test 1', 'X');
  let player2 = new Player('Test 2', 'O');
  let gameLogic = new GameLogic(player1, player2, board);
  gameLogic.makeMove(0);

  expect(getConsoleLogOutput()).toEqual([
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`]
  ]);
});

test('Check for a draw if there are no winners and the board is full.', () => {
  let game = new Game(6, 7);
  let board = game.board;
  let player1 = new Player('Test 1', 'X');
  let player2 = new Player('Test 2', 'O');
  let gameLogic = new GameLogic(player1, player2, board);
  // loop to fill board
  [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 2, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 4, 5, 4, 5, 4, 5, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6].forEach(col => gameLogic.makeMove(col));
  getConsoleLogOutput(); // clear console log
  gameLogic.makeMove(6); // last move to fill board
  expect(getConsoleLogOutput()).toEqual([
    ['| O | X | O | X | O | X | O |'],
    [' ---------------------------'],
    ['| O | X | O | X | O | X | X |'],
    [' ---------------------------'],
    ['| O | X | O | X | O | X | O |'],
    [' ---------------------------'],
    ['| X | O | X | O | X | O | X |'],
    [' ---------------------------'],
    ['| X | O | X | O | X | O | O |'],
    [' ---------------------------'],
    ['| X | O | X | O | X | O | X |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's a draw!`]
  ]);
});

test('Check that the switchPlayer() method works', () => {
  let game = new Game(6, 7);
  let board = game.board;
  let player1 = new Player('Test 1', 'X');
  let player2 = new Player('Test 2', 'O');
  let gameLogic = new GameLogic(player1, player2, board);
  gameLogic.switchPlayer();
  expect(getConsoleLogOutput()).toEqual([
    [`It's Test 2's turn.`]
  ]);
  gameLogic.switchPlayer();
  expect(getConsoleLogOutput()).toEqual([
    [`It's Test 1's turn.`]
  ]);
  gameLogic.switchPlayer();
  expect(getConsoleLogOutput()).toEqual([
    [`It's Test 2's turn.`]
  ]);
});

test('Check that method checkForWin() for horizontal win work', () => {
  let game = new Game(6, 7);
  let board = game.board;
  let player1 = new Player('Test 1', 'X');
  let player2 = new Player('Test 2', 'O');
  let gameLogic = new GameLogic(player1, player2, board);

  // Horizontal win
  [0, 0, 1, 1, 2, 2, 3, 3, 4].forEach(col => gameLogic.makeMove(col));
  expect(getConsoleLogOutput()).toEqual([
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X | X | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`Test 1 wins!`]
  ]);
});

test('Check that method checkForWin() for vertical win work', () => {
  let game = new Game(6, 7);
  let board = game.board;
  let player1 = new Player('Test 1', 'X');
  let player2 = new Player('Test 2', 'O');
  let gameLogic = new GameLogic(player1, player2, board);

  // Vertical win
  [0, 1, 0, 1, 0, 1, 0].forEach(col => gameLogic.makeMove(col));
  expect(getConsoleLogOutput()).toEqual([
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`Test 1 wins!`]
  ]);
});

test('Check that method checkForWin() for diagonal win (bottom left to top right) work', () => {
  let game = new Game(6, 7);
  let board = game.board;
  let player1 = new Player('Test 1', 'X');
  let player2 = new Player('Test 2', 'O');
  let gameLogic = new GameLogic(player1, player2, board);

  // Diagonal win (bottom left to top right)
  [0, 1, 1, 2, 2, 3, 2, 3, 3, 0, 3].forEach(col => gameLogic.makeMove(col));
  expect(getConsoleLogOutput()).toEqual([
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O |   |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O |   |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O | O |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | X |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O | O |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | X |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X | O |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O | O |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | X | X |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X | O |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O | O |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | X | X |   |   |   |'],
    [' ---------------------------'],
    ['| O | X | X | O |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O | O |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   | X |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | X | X |   |   |   |'],
    [' ---------------------------'],
    ['| O | X | X | O |   |   |   |'],
    [' ---------------------------'],
    ['| X | O | O | O |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`Test 1 wins!`]
  ]);
});

test('Check that method checkForWin() for diagonal win (top left to bottom right) work', () => {
  let game = new Game(6, 7);
  let board = game.board;
  let player1 = new Player('Test 1', 'X');
  let player2 = new Player('Test 2', 'O');
  let gameLogic = new GameLogic(player1, player2, board);

  // Diagonal win (top left to bottom right)
  [3, 2, 2, 1, 1, 0, 1, 0, 0, 2, 0].forEach(col => gameLogic.makeMove(col));
  expect(getConsoleLogOutput()).toEqual([
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | X |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   | X |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   | X |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 2's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X | O |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`It's Test 1's turn.`],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['|   |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X |   |   |   |   |   |   |'],
    [' ---------------------------'],
    ['| X | X | O |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | X | X |   |   |   |   |'],
    [' ---------------------------'],
    ['| O | O | O | X |   |   |   |'],
    [' ---------------------------'],
    ['  1   2   3   4   5   6   7 '],
    [`Test 1 wins!`]
  ]);
});